# Interactive Breakpoints Session
# ------------------------------------------------------------------------------
# This transcript captures a debugging run that sets both unconditional and
# conditional breakpoints. It shows how to inspect variables while stepping
# through code and demonstrates using conditions to skip irrelevant values.

$ python -m pdb debug_breakpoints_complex.py
> debug_breakpoints_complex.py(1)<module>()
-> # Advanced Breakpoint Scenarios
(Pdb) break debug_breakpoints_complex.py:11, item % 2 == 0
(Pdb) break debug_breakpoints_complex.py:14, item > 50
(Pdb) run
> debug_breakpoints_complex.py(10)process_items()
-> for item in items:
(Pdb) continue
processed 1
> debug_breakpoints_complex.py(11)process_items()
-> if item % 2 == 0:
(Pdb) continue
> debug_breakpoints_complex.py(13)process_items()
-> breakpoint()  # stops when item is even
(Pdb) print(item)
4
(Pdb) continue
processed 4
> debug_breakpoints_complex.py(11)process_items()
-> if item % 2 == 0:
(Pdb) continue
processed 8
> debug_breakpoints_complex.py(15)process_items()
-> if item > 50:
(Pdb) continue
> debug_breakpoints_complex.py(16)process_items()
-> pdb.set_trace()  # triggers on large values
(Pdb) print(item)
60
(Pdb) continue
processed 60
